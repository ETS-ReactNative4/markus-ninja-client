import * as React from 'react'
import {
  createRefetchContainer,
  graphql,
} from 'react-relay'
import cls from 'classnames'
import { Route, Link } from 'react-router-dom'
import queryString from 'query-string'
import Edge from 'components/Edge'
import ListItem from 'components/ListItem'
import StudyLink from 'components/StudyLink'
import { debounce, get, isNil, isEmpty } from 'utils'
import { SEARCH_BAR_RESULTS_PER_PAGE } from 'consts'

class SearchBarInput extends React.Component {
  state = {
    error: null,
    loading: false,
    focus: false,
    q: "",
    skip: true,
  }

  componentWillMount() {
    document.addEventListener('mousedown', this.handleClick, false);
  }

  componentWillUnmount() {
    document.removeEventListener('mousedown', this.handleClick, false);
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevState.skip && !this.state.skip) {
      this._refetch(this.state.q)
    }
  }

  handleClick = (e) => {
    if (this.node.contains(e.target)) {
      return;
    }

    this.setState({ focus: false })
  }

  render() {
    const { q, loading, focus } = this.state
    const searchEdges = get(this.props, "query.search.edges", [])
    return (
      <div ref={node => this.node = node} className="SearchBarInput relative">
        <form action="/search" acceptCharset="utf8" method="get">
          <label
            htmlFor="search-query"
            className="relative"
          >
            <input
              id="search-query"
              autoComplete="off"
              className="SearchBar__input"
              type="text"
              name="q"
              placeholder="Search..."
              value={q}
              onChange={this.handleChange}
              onFocus={() => this.setState({ focus: true, skip: false })}
            />
            <div className={cls("search-results mdc-list absolute overflow-hidden w-100", {dn: !focus})}>
              {loading && searchEdges.length < 1
              // eslint-disable-next-line jsx-a11y/role-supports-aria-props
              ? <div className="mdc-list mdc-list--non-iteractive" aria-orientation="vertical">
                  <ListItem>Loading...</ListItem>
                </div>
              // eslint-disable-next-line jsx-a11y/role-supports-aria-props
              : <div className="mdc-list" aria-orientation="vertical">
                  <Route path="/:owner/:name" render={({ match }) =>
                    <ListItem>
                      <Link
                        className="w-100"
                        to={{
                          pathname: match.url + "/search",
                          search: queryString.stringify({ q }),
                        }}
                      >
                        Search this study...
                      </Link>
                    </ListItem>}
                  />
                  {searchEdges.length > 0
                  ? searchEdges.map((edge) =>
                      <Edge key={get(edge, "node.id", "")} edge={edge} render={({ node }) =>
                        <ListItem>
                          <StudyLink withOwner study={node} />
                        </ListItem>
                      }/>)
                  : <ListItem>No results found...</ListItem>}
                </div>}
            </div>
          </label>
        </form>
      </div>
    )
  }

  handleChange = (e) => {
    const q = e.target.value
    this.setState({
      q,
    })
    this._refetch(q)
  }

  _refetch = debounce((query) => {
    this.setState({
      loading: true,
    })
    this.props.relay.refetch(
      {
        count: SEARCH_BAR_RESULTS_PER_PAGE,
        query: isEmpty(query) ? "*" : query,
        skip: this.state.skip,
      },
      null,
      (error) => {
        if (!isNil(error)) {
          console.log(error)
        }
        this.setState({ loading: false })
      },
      {force: true},
    )
  }, 300)

}

export default createRefetchContainer(SearchBarInput,
  {
    query: graphql`
      fragment SearchBarInput_query on Query {
        search(first: $count, query: $query, type: STUDY)
          @skip(if: $skip)
          @connection(key:"SearchBarInput_search", filters: []) {
          edges {
            node {
              id
              ...on Study {
                ...StudyLink_study
              }
            }
          }
        }
      }
    `
  },
  graphql`
    query SearchBarInputRefetchQuery(
      $count: Int!
      $query: String!,
      $skip: Boolean!
    ) {
      ...SearchBarInput_query
    }
  `,
)
